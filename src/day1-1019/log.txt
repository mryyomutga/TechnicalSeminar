Python 2.7.12 (default, Nov 19 2016, 06:48:10) 
[GCC 5.4.0 20160609] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> x = 10
>>> y = 20
>>> z = 30
>>> x
10
>>> y
20
>>> z
30
>>> x,y,z=1,2,3
>>> x
1
>>> y
2
>>> z
3
>>> str1="Hello %d" % x
>>> print str1
Hello 1
>>> x = 0.1
>>> x
0.1
>>> print "%04d" x
  File "<stdin>", line 1
    print "%04d" x
                 ^
SyntaxError: invalid syntax
>>> str1 = "hello world2
  File "<stdin>", line 1
    str1 = "hello world2
                       ^
SyntaxError: EOL while scanning string literal
>>> str1 = "hello world"
>>> print str1
hello world
>>> str1
'hello world'
>>> str2 = "Hello world %d" % 1129
>>> str2
'Hello world 1129'
>>> str2 = "Hello world %08d" % 1129
>>> str2
'Hello world 00001129'
>>> f = 0.12345
>>> print f
0.12345
>>> str3 = "%0.10f" % 
  File "<stdin>", line 1
    str3 = "%0.10f" % 
                     ^
SyntaxError: invalid syntax
>>> str3 = "%0.10f" % f
>>> str
<type 'str'>
>>> str3
'0.1234500000'
>>> print "hello %d" % 1129 
hello 1129
>>> print "hello %d %d" % (1129,30) 
hello 1129 30
>>> print "%x" % 15
f
>>> print "%x" % 255
ff
>>> print('Jack Bauer %d %x ' % (123,123))
Jack Bauer 123 7b 
>>> 
>>> from __future__ import print_function
>>> # python3のprintを使えるようにする
... 
>>> import math
>>> math.sin(0.4)
0.3894183423086505
>>> math.cos(0.4)
0.9210609940028851
>>> import math
>>> math.pi
3.141592653589793
>>> math.e
2.718281828459045
>>> dir(math)
['__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']
>>> help(math)

>>> math.pow(10,3)
1000.0
>>> L=[123456789, 10]
>>> L
[123456789, 10]
>>> L=[123456789, 10, "ABC"]
>>> L
[123456789, 10, 'ABC']
>>> len(L)
3
>>> L[0]
123456789
>>> L[0] = "(o_o)"
>>> L
['(o_o)', 10, 'ABC']
>>> L[0]
'(o_o)'
>>> L.append("qwert")
>>> L
['(o_o)', 10, 'ABC', 'qwert']
>>> L.remove("ABC")
>>> L.append("ABC")
>>> L.append("ABC")
>>> L.remove("ABC")
>>> L
['(o_o)', 10, 'qwert', 'ABC']
>>> del 1
  File "<stdin>", line 1
SyntaxError: can't delete literal
>>> del L[1]
>>> L
['(o_o)', 'qwert', 'ABC']
>>> L=(10, 20, 30)
>>> L
(10, 20, 30)
>>> L[0}
  File "<stdin>", line 1
    L[0}
       ^
SyntaxError: invalid syntax
>>> L[0]
10
>>> L[1]
20
>>> L[2]
30
>>> L[2] = 15
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> X=[10,20,30,40,50]
>>> X[0]
10
>>> X[-1]
50
>>> X[-2]
40
>>> X[-3]
30
>>> X[-4]
20
>>> X[-5]
10
>>> X[-6]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: list index out of range
>>> 
>>> range(5,10)
[5, 6, 7, 8, 9]
>>> range(5,10,2)
[5, 7, 9]
>>> range(10,1,-2)
[10, 8, 6, 4, 2]
>>> x = range(100, 50, -5
... 
KeyboardInterrupt
>>> x = range(100, 50, -5)
>>> x
[100, 95, 90, 85, 80, 75, 70, 65, 60, 55]
>>> 55 in x
True
>>> 56 in x
False
>>> 1/3
0
>>> 1/3.0
0.3333333333333333
>>> 1.0/3
0.3333333333333333
>>> x = 1
>>> x/ 3
0
>>> x = 1.0
>>> x/ 3
0.3333333333333333
>>> isinstance(x, float)
True
>>> x = 1
>>> isinstance(x, float)
False
>>> isinstance(x, int)
True
>>> type(x)
<type 'int'>
>>> x = 1.0
>>> type(x)
<type 'float'>
>>> dir()
['L', 'X', '__builtins__', '__doc__', '__name__', '__package__', 'f', 'math', 'print_function', 'str1', 'str2', 'str3', 'x', 'y', 'z']
>>> 
>>> from pprint import pprint
>>> pprint(dir())
['L',
 'X',
 '__builtins__',
 '__doc__',
 '__name__',
 '__package__',
 'f',
 'math',
 'pprint',
 'print_function',
 'str1',
 'str2',
 'str3',
 'x',
 'y',
 'z']
>>> del sum(x,y):
  File "<stdin>", line 1
    del sum(x,y):
                ^
SyntaxError: invalid syntax
>>> def sum(x,y):
...     print(a)
...     print(b)
...     return a + b
... 
>>> def sum(a, b):
...     print(a)
...     print(b)
...     return a + b
... 
>>> sum(100,200)
100
200
300
>>> quit(
... 
[3]+  停止                  python
